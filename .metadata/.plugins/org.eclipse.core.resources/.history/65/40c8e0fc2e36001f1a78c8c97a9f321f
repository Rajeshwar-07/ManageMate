package com.projectmanagement.service.impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.projectmanagement.model.Project;
import com.projectmanagement.model.Task;
import com.projectmanagement.repository.ProjectRepository;
import com.projectmanagement.repository.TaskRepository;
import com.projectmanagement.service.TaskService;

@Service
public class TaskServiceImpl implements TaskService {

	private final TaskRepository repository;

	private final ProjectRepository projectRepository;

	public TaskServiceImpl(TaskRepository repository, ProjectRepository projectRepository) {
		this.repository = repository;
		this.projectRepository = projectRepository;
	}

	@Override
	public Task createTask(Project projectId, Task task) {
		if(projectRepository.findById(projectId).get() == null) {
			
		}
		Task saveTask = repository.save(task);
		return saveTask;
	}

	@Override
	public Task getTaskById(Long taskId) {
		Task findTask = repository.findById(taskId).get();
		return findTask;
	}

	@Override
	public List<Task> getTaskList() {
		List<Task> getTaskList = repository.findAll();
		return getTaskList;
	}

	@Override
	public String deleteTask(Long taskId) {
		Task deleteTask = repository.findById(taskId).get();
		if (deleteTask != null) {
			repository.deleteById(taskId);
			return "Delete Successfully";
		}
		return null;
	}

	@Override
	public Task updateTask(Long taskId, Task updatedTask) {
		Task existingTask = repository.findById(taskId).get();
		if (existingTask != null) {
			existingTask.setTaskName(updatedTask.getTaskName());
			existingTask.setTaskDescription(updatedTask.getTaskDescription());
			existingTask.setStatus(updatedTask.getStatus());
			existingTask.setDueDate(updatedTask.getDueDate());
			return repository.save(existingTask);
		}
		return null;
	}

}
