package com.projectmanagement.service.impl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.projectmanagement.dto.TaskDto;
import com.projectmanagement.model.Project;
import com.projectmanagement.model.Task;
import com.projectmanagement.model.Users;
import com.projectmanagement.repository.ProjectRepository;
import com.projectmanagement.repository.TaskRepository;
import com.projectmanagement.repository.UserRepository;
import com.projectmanagement.service.TaskService;

@Service
public class TaskServiceImpl implements TaskService {

	private final TaskRepository repository;

	private final ProjectRepository projectRepository;

	private final UserRepository userRepository;

	public TaskServiceImpl(TaskRepository repository, ProjectRepository projectRepository,
			UserRepository userRepository) {
		this.repository = repository;
		this.projectRepository = projectRepository;
		this.userRepository = userRepository;
	}

	@Override
	public TaskDto createTask(Long projectId, Task task, Long userId) {
		Optional<Project> projectOpt = projectRepository.findById(projectId);
		Optional<Users> userOpt = userRepository.findById(userId);
		if (projectOpt.isPresent() && userOpt.isPresent()) {
			Project project = projectOpt.get();
			task.setProject(project);
			task.setStatus("Pending");
			return mapToDto(repository.save(task));
		}
		return null;
	}

	@Override
	public TaskDto getTaskById(Long taskId) {
		Task findTask = repository.findById(taskId).get();
		return mapToDto(findTask);
	}

	@Override
	public List<TaskDto> getTaskList() {
		return repository.findAll().stream().map(this::mapToDto).collect(Collectors.toList());
	}

	@Override
	public String deleteTask(Long taskId) {
		Task deleteTask = repository.findById(taskId).get();
		if (deleteTask != null) {
			repository.deleteById(taskId);
			return "Delete Successfully";
		}
		return null;
	}

	@Override
	public TaskDto updateTask(Long taskId, Task updatedTask) {
		Task existingTask = repository.findById(taskId).get();
		if (existingTask != null) {
			existingTask.setTaskName(updatedTask.getTaskName());
			existingTask.setTaskDescription(updatedTask.getTaskDescription());
			existingTask.setStatus(updatedTask.getStatus());
			existingTask.setDueDate(updatedTask.getDueDate());
			return mapToDto(repository.save(existingTask));
		}
		return null;
	}

	private TaskDto mapToDto(Task task) {
		TaskDto dto = new TaskDto();
		dto.setTaskName(task.getTaskName());
		dto.setTaskDescription(task.getTaskDescription());
		dto.setStatus(task.getStatus());
		dto.setDueDate(task.getDueDate());
		dto.setProjectId(task.getProject().getProjectId());
		return dto;
	}

}
