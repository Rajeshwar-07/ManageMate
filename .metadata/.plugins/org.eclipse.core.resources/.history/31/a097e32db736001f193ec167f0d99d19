package com.projectmanagement.service.impl;

import java.util.List;
import java.util.Optional;

import com.projectmanagement.model.Comment;
import com.projectmanagement.repository.CommentRepository;
import com.projectmanagement.repository.TaskRepository;
import com.projectmanagement.repository.UserRepository;
import com.projectmanagement.service.CommentService;

public class CommentServiceImpl implements CommentService {

	private final CommentRepository commentRepository;
	private final TaskRepository taskRepository;
	private final UserRepository userRepository;

	public CommentServiceImpl(CommentRepository commentRepository) {
		this.commentRepository = commentRepository;
	}

	@Override
	public Comment createComment(Comment comment) {
		Comment saveComment = commentRepository.save(comment);
		return saveComment;
	}

	@Override
	public Comment getCommentById(Long commentId) {
		Optional<Comment> comment = commentRepository.findById(commentId);
		if (comment.isPresent()) {
			Comment getCommentById = comment.get();
			return getCommentById;
		}
		return null;
	}

	@Override
	public List<Comment> getCommentList() {
		List<Comment> getCommentList = commentRepository.findAll();
		return getCommentList;
	}

	@Override
	public String deleteComment(Long commentId) {
		Optional<Comment> comment = commentRepository.findById(commentId);
		if (comment.isPresent()) {
			commentRepository.deleteById(commentId);
			return "Delete Successfully";
		}
		return null;
	}

	@Override
	public Comment updateComment(Long commentId, Comment updateComment) {
		Optional<Comment> comment = commentRepository.findById(commentId);
		if (comment.isPresent()) {
			Comment existingComment = comment.get();
			existingComment.setContent(updateComment.getContent());
			existingComment.setCreatedAt(updateComment.getCreatedAt());
			return commentRepository.save(existingComment);
		}
		return null;
	}
}
